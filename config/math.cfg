
// allows for using a human-readable syntax
// e.g. (imath 5 + 6)
// also supports operations like: (imath (imath 5 + 6 + 7 + 8) / 10)
imath = [
    local int_a
    local int_b
    local int_operator
    local prev_result
    local num_operators

    prev_result = 0
    num_operators = (- $numargs 2)

    loop i $num_operators [
        if (= $i 0) [
            int_a =        $[arg@(+ 1 (* 3 $i))]
            int_operator = $[arg@(+ 2 (* 3 $i))]
            int_b =        $[arg@(+ 3 (* 3 $i))]
        ] [ 
            int_a =        $prev_result
            int_operator = $[arg@(+ 1 (* 3 $i))]
            int_b =        $[arg@(+ 2 (* 3 $i))]
        ]

        cases $int_operator + [ prev_result = (+   $int_a $int_b)
        ] -  [                  prev_result = (-   $int_a $int_b)
        ] *  [                  prev_result = (*   $int_a $int_b)
        ] /  [                  prev_result = (div $int_a $int_b)
        ] == [                  prev_result = (=   $int_a $int_b)
        ] != [                  prev_result = (!=  $int_a $int_b)
        ] <  [                  prev_result = (<   $int_a $int_b)
        ] >  [                  prev_result = (>   $int_a $int_b)
        ] <= [                  prev_result = (<=  $int_a $int_b)
        ] >= [                  prev_result = (>=  $int_a $int_b) 
        ] << [                  prev_result = (<<  $int_a $int_b)
        ] >> [                  prev_result = (>>  $int_a $int_b)
        ] |~ [                  prev_result = (|~  $int_a $int_b)
        ] &~ [                  prev_result = (&~  $int_a $int_b)
        ] ^  [                  prev_result = (^   $int_a $int_b)
        ] ^~ [                  prev_result = (^~  $int_a $int_b) ]
    ]
    result $prev_result
]

fmath = [
    local float_a
    local float_b
    local float_operator
    local prev_result
    local num_operators

    prev_result = 0
    num_operators = (- $numargs 2)

    loop i $num_operators [
        if (= $i 0) [ 
            float_a =        $[arg@(+ 1 (* 3 $i))]
            float_operator = $[arg@(+ 2 (* 3 $i))]
            float_b =        $[arg@(+ 3 (* 3 $i))]
        ] [ 
            float_a =        $prev_result
            float_operator = $[arg@(+ 1 (* 3 $i))]
            float_b =        $[arg@(+ 2 (* 3 $i))]
        ]

        cases $float_operator + [   prev_result = (+f $arg1 $arg3)
        ] -  [                      prev_result = (-f $arg1 $arg3)
        ] *  [                      prev_result = (*f $arg1 $arg3)
        ] /  [                      prev_result = (divf $arg1 $arg3)
        ] == [                      prev_result = (=f $arg1 $arg3)
        ] != [                      prev_result = (!=f $arg1 $arg3)
        ] <  [                      prev_result = (<f $arg1 $arg3)
        ] >  [                      prev_result = (>f $arg1 $arg3)
        ] <= [                      prev_result = (<=f $arg1 $arg3)
        ] >= [                      prev_result = (>=f $arg1 $arg3) ]
    ]
    result $prev_result
]


// wrapper for "mathematical" string operations like
// (smath "Hello" + " World") = "Hello World"
smath = [
    local string_a
    local string_b
    local string_operator
    local prev_result
    local num_operators

    prev_result = 0
    num_operators = (- $numargs 2)

    loop i $num_operators [
        if (= $i 0) [
            string_a =        $[arg@(+ 1 (* 3 $i))]
            string_operator = $[arg@(+ 2 (* 3 $i))]
            string_b =        $[arg@(+ 3 (* 3 $i))]
        ] [
            string_a =        $prev_result
            string_operator = $[arg@(+ 1 (* 3 $i))]
            string_b =        $[arg@(+ 2 (* 3 $i))]
        ]

        cases $string_operator == [ prev_result = (=s  $string_a $string_b)
        ] != [                      prev_result = (!=s $string_a $string_b)
        ] +  [                      prev_result = (format "%1%2" $string_a $string_b) ]
    ]
    result $prev_result
]
